(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{479:function(t,s,n){"use strict";n.r(s);var a=n(23),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"浏览器-网络"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#浏览器-网络"}},[t._v("#")]),t._v(" 浏览器 + 网络")]),t._v(" "),n("h2",{attrs:{id:"输入-url-后的过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#输入-url-后的过程"}},[t._v("#")]),t._v(" 输入 url 后的过程")]),t._v(" "),n("p",[t._v("先主要讲一下 js、css、dom 的"),n("a",{attrs:{href:"https://www.cnblogs.com/caizhenbo/p/6679478.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("阻塞问题"),n("OutboundLink")],1),t._v("。"),n("br"),t._v("\n此外还要注意查询 ip 时先查询本地 hosts 文件，以及最后的"),n("strong",[t._v("格栅化")]),t._v("。")]),t._v(" "),n("p",[t._v("1、dom 解析时，遇见 script 标签会阻塞 dom 的解析及渲染(执行或者下载并执行 js，这取决于内联还是外联)。解决办法：defer 和 async(从下载和执行两个角度对比)。所以 js 标签放在底部。"),n("br"),t._v(" "),n("img",{attrs:{src:"/blog/assets/img/defer&async.png",alt:"对比图"}})]),t._v(" "),n("p",[t._v("2、network 里的蓝色线就是 domContentLoaded 事件触发的时间，红色线是 load 事件触发的时间，前者需要分情况，但总归都是 dom 解析完成时触发，即页面出现内容，可以拿到节点。load 需要所有资源都加载完成后触发，包括图片。")]),t._v(" "),n("p",[t._v("3、css 的加载不阻塞 dom 解析，但是阻塞 dom 渲染，从两个树并行解析和浏览器性能优化角度可以分析。此外，css 加载还会阻塞 js 的执行，js 加载也会阻塞 css 解析和渲染。")]),t._v(" "),n("p",[t._v("4、css 放在 head 标签中的目的：如果放在 body 底部，会二次渲染，影响性能和用户体验。")]),t._v(" "),n("h2",{attrs:{id:"web-worker"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#web-worker"}},[t._v("#")]),t._v(" Web Worker")]),t._v(" "),n("p",[n("strong",[t._v("作用")]),t._v("：H5 的 API，创建 Worker 线程，在主线程执行任务的同时，Worker 线程也可以在后台执行它自己的任务，互不干扰。可以把高延迟、花费大量时间的运算，分给 Worker 线程，最后再把结果返回给主线程就可以了，因为时间花费多的任务被 Web Worker 承担了，主线程就会很流畅了。"),n("strong",[t._v("比如浏览器中 JS 与 UI 共用一个线程，JS 的大量计算有可能会阻塞 UI 渲染")]),t._v("。"),n("br"),t._v(" "),n("strong",[t._v("场景")]),t._v("：当我们有些任务需要花费大量的时间，进行复杂的运算，就会导致页面卡死，可能用户点击页面需要很长的时间才能响应，因为前面的任务还未完成，后面的任务只能排队等待。对用户来说，这样的体验无疑是糟糕的。"),n("br"),t._v(" "),n("strong",[t._v("使用")]),t._v("：")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 主线程使用new命令调用Worker()构造函数创建一个Worker线程")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Worker构造函数接收参数为脚本文件路径")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" worker "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Worker")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xxxxx.js"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 主线成指定监听函数监听Worker线程的返回消息")]),t._v("\nworker"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onmessage")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// data为Worker发来的数据")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 由于主线程与Worker线程存在通信限制,不再同一个上下文中,所以只能通过消息完成")]),t._v("\nworker"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("postMessage")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当使用完成后，如果不需要再使用可以在主线程中关闭Worker")]),t._v("\nworker"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("terminate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Worker也可以关闭自身,在Worker的脚本中执行")]),t._v("\nself"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[n("strong",[t._v("缺点")]),t._v("："),n("br"),t._v("\n文件限制：Worker 接受的脚本必须来自于网络，不能是本地。"),n("br"),t._v("\n通信限制：两个线程不在一个上下文环境中，不能直接通信，要依赖消息队列即 postMessage 方法。"),n("br"),t._v("\nDOM 限制：Worker 线程无法获取主线程所在的网页的 DOM。"),n("br"),t._v("\n跨域限制：Worker 接收的脚本必须和主线程的脚本文件同源。"),n("br"),t._v("\n此外：虽然 Worker 可以处理复杂 js，但 Worker 本身以及与主线程的通信也是需要开销的，需要权衡。"),n("br"),t._v(" "),n("a",{attrs:{href:"https://yrq110.me/post/front-end/introduction-to-web-worker/",target:"_blank",rel:"noopener noreferrer"}},[t._v("补充"),n("OutboundLink")],1)]),t._v(" "),n("h2",{attrs:{id:"web-socket"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#web-socket"}},[t._v("#")]),t._v(" Web Socket")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://mp.weixin.qq.com/s/QBHMbSWSd4KU7TByRq2RRw",target:"_blank",rel:"noopener noreferrer"}},[t._v("为什么用这个"),n("OutboundLink")],1),n("br"),t._v(" "),n("a",{attrs:{href:"http://www.52im.net/forum.php?mod=viewthread&tid=332",target:"_blank",rel:"noopener noreferrer"}},[t._v("一种通信协议"),n("OutboundLink")],1),t._v("，初次认识是因为可以跨域。后续补充。"),n("br"),t._v(" "),n("a",{attrs:{href:"https://juejin.cn/post/6844903544978407431#heading-12",target:"_blank",rel:"noopener noreferrer"}},[t._v("掘金"),n("OutboundLink")],1),t._v("\nwebsocket 协议名字不一样 ws+wss，端口号和 http/s 一致，最大的优点是双向通信，可以服务端推送实时性更强、更好的二进制支持、较少的控制开销"),n("br"),t._v("\n还有支持扩展。ws 协议定义了扩展，用户可以扩展协议，或者实现自定义的子协议。（比如支持自定义压缩算法等）"),n("br"),t._v("\n1、客户端发起升级协议请求 connection + update + Sec-WebSocket-Key"),n("br"),t._v("\n2、服务端返回同意升级的响应 connection + update + Sec-WebSocket-Accept"),n("br"),t._v("\n3、“Sec-WebSocket-Accept”头的值，返回给客户端。客户端收到这个之后，就会将通信协议 upgrade 到 websocket 协议"),n("br"),t._v("\n4、开始以数据帧的格式进行客户端、服务端数据的交换"),n("br"),t._v("\n5、用心跳实现连接的长时间保持"),n("br"),t._v("\n前端定时发送心跳消息 ping，后端收到 ping 类型的消息，立马返回 pong 消息，告知前端连接正常。"),n("br"),t._v("\n如果一定时间没收到 pong 消息，就说明连接不正常，前端便会执行重连。"),n("br"),t._v("\n6、Sec-WebSocket-Key/Accept 的作用：提供基础的防护，保障 websocket 正确连接")]),t._v(" "),n("h2",{attrs:{id:"http-状态码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#http-状态码"}},[t._v("#")]),t._v(" HTTP 状态码")]),t._v(" "),n("p",[t._v("101：协议升级。始终由客户端发起，并且服务器可能接受或拒绝切换到新协议。客户端可使用常用的协议(如 HTTP / 1.1)发起请求，请求说明需要切换到 HTTP/2 或甚至到 WebSocket。有请求头和响应头如 update: websocket"),n("br"),t._v("\n204：服务端成功处理了请求，而不返回资源，页面也不更新。常用于只需要客户端向服务端进行发送数据。"),n("br"),t._v("\n205：与 204 类似，不同的地方在于：要求客户端重置文档视图。常用于接受了用户的表单输入后，立即重置表单，以便进行下一次输入。"),n("br"),t._v("\n206：客户端进行范围请求。比如迅雷下载将大文件分成多个文件同时下载，需要有 range 请求头描述范围。"),n("br"),t._v("\n301：永久重定向。"),n("br"),t._v("\n302：临时重定向。"),n("br"),t._v("\n他们都会跳转到重定向的 url，响应头都有 location 字段，表示最新的 url。"),n("br"),t._v("\n区别："),n("br"),t._v("\n①、301 表示网页永久性地转移到另一个 url。302 是临时性地转移。"),n("br"),t._v("\n②、302 可能发生"),n("a",{attrs:{href:"https://github.com/chenyongyang/blog/issues/43",target:"_blank",rel:"noopener noreferrer"}},[t._v("url 劫持"),n("OutboundLink")],1),t._v("(302 保留原来的 url，如果定向的 url 过于复杂，则会显示之前的 url，但是网页内容是定向的网页内容，发生劫持)，并且很多时候被搜索引擎认为作弊，会导致降权。"),n("br"),t._v("\n③、301 会将域名的权重转移到新 url，从而增加新 url 的权重。302 不会转移权重。"),n("br"),t._v("\n④、使用场景：301 适用于想更换域名，告诉搜索引需要对新的域名进行收录。302 适用于网站故障、维护、更新等情况。"),n("br"),t._v("\n502：bad gateway 连接超时，服务器压力大"),n("br"),t._v("\n401：客户端的访问未经授权")]),t._v(" "),n("h2",{attrs:{id:"http-method"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#http-method"}},[t._v("#")]),t._v(" HTTP method")]),t._v(" "),n("p",[t._v("PUT: 创建或者替换目标资源：用户的账户二维码只和用户关联，而且是一一对应的关系，此时这个 api 就可以用 PUT，因为每次调用它，都将刷新用户账户二维码；再比如防止重复提交订单。"),n("br"),t._v("\nPOST 方法 发送数据给服务器，也是可以更新或者创建资源：举个例子，在我们的支付系统中，一个 api 的功能是创建收款金额二维码，它和金额相关，每个用户可以有多个二维码，如果连续调用则会创建新的二维码，这个时候就用 POST"),n("br"),t._v("\nput 和 post 区别: put 幂等、post 不幂等"),n("br"),t._v("\nGET 和 POST 速度的区别：get 发送一个 tcp 数据包，post 发送两个 tcp 数据包")]),t._v(" "),n("h2",{attrs:{id:"ajax-请求"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ajax-请求"}},[t._v("#")]),t._v(" Ajax 请求")]),t._v(" "),n("p",[t._v("1、xhr：① 原生、② 封装 xhr 的 jQ、③ 封装 xhr 的 axios。后两者都是基于 promise 的链式调用，但都是第三方的模块。"),n("br"),t._v("\n2、fetch：原生的并且基于 promise，关注分离的设计模式(可以先看服务器是否连接上，然后再处理数据，也就是说并不是直接给数据)。缺点：兼容性差(ie 全系列都不行)。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//使用async和await的版本，更加简洁，同步表示异步。注意response.json()返回的是promise实例")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//外部需要配合async使用")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" response "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetch")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("/api1/search/users2?q=")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("keyWord"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" response"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("json")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  PubSub"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("publish")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"atguigu"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" isLoading"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" users"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("items "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("error"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"请求出错"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" error"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  PubSub"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("publish")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"atguigu"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" isLoading"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" error"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("message "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h2",{attrs:{id:"udp-与-tcp"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#udp-与-tcp"}},[t._v("#")]),t._v(" UDP 与 TCP")]),t._v(" "),n("h2",{attrs:{id:"headers"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#headers"}},[t._v("#")]),t._v(" headers")]),t._v(" "),n("p",[t._v("1、Access-Control-Allow-Credentials(和 cookie 有关): 响应头表示是否可以将对请求的响应暴露给页面。返回 true 则可以，其他值均不可以。"),n("br"),t._v("\n2、host: 请求头指明了请求将要发送到的服务器主机名和端口号。"),n("br"),t._v("\n3、referer：表明请求来源的地址，包括协议域名端口、路径参数。常用于防范 csrf(比如恶意网站里的一个表单)。"),n("br"),t._v("\n4、origin：同上，但只包括协议域名端口。常用于跨域 cors。"),n("br"),t._v("\n5、Connection：决定当前的事务完成后，是否会关闭网络连接。如果该值是“keep-alive”，网络连接就是持久的，不会关闭，使得对同一个服务器的请求可以继续在该连接上完成。还如 Connection:Upgrade。"),n("br"),t._v("\n6、Content-type：post 或 put 方法设置数据类型"),n("br"),t._v('\n发送 json 格式数据：xhr.setRequestHeader("Content-type","application/json; charset=utf-8");'),n("br"),t._v('\n发送表单数据：xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=utf-8");'),n("br"),t._v('\n发送纯文本：xhr.setRequestHeader("Content-type", "text/plain; charset=utf-8");'),n("br"),t._v('\n发送 html 文本：xhr.setRequestHeader("Content-type", "text/html; charset=utf-8");'),n("br"),t._v("\n其余还有 image/gif ; image/jpeg; image/png\n补充：xhr.readyState:"),n("br"),t._v("\n0: xhr 被创建，尚未调用 open() 方法。"),n("br"),t._v("\n1：open() 方法已经被调用。可以通过 setRequestHeader() 方法来设置请求的头部， 可以调用 send() 方法来发起请求。"),n("br"),t._v("\n2：send() 方法已经被调用，响应头也已经被接收。"),n("br"),t._v("\n3：下载中，响应体部分正在被接收。"),n("br"),t._v("\n4：数据传输已经彻底完成或失败。")]),t._v(" "),n("h2",{attrs:{id:"xss"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#xss"}},[t._v("#")]),t._v(" XSS")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://segmentfault.com/a/1190000016551188",target:"_blank",rel:"noopener noreferrer"}},[t._v("详细"),n("OutboundLink")],1),n("br"),t._v("\n1、对于转义、过滤，除了尖括号，还有 href 和 src 属性里的 javascript:进行过滤"),n("br"),t._v("\n2、反射型和 DOM 型都是攻击者构造具有恶意代码的 url，区别是：反射型是请求 url 后，服务端将恶意代码取出，拼接成 html 后返回，前端再自动执行。"),n("br"),t._v("\nDOM 型是后端返回后，前端取出恶意代码并执行。")]),t._v(" "),n("h2",{attrs:{id:"csrf"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#csrf"}},[t._v("#")]),t._v(" CSRF")]),t._v(" "),n("p",[t._v("1.referer 2.验证码 3.token"),n("br"),t._v("\n补充：响应头 set-cookie 里的 samesite 属性，设置 lax 和 strict 都能防御 CSRF 攻击。默认为 lax。区别如下："),n("br"),t._v("\nlax：Cookies 允许与顶级导航一起发送，并将与第三方网站发起的 GET 请求一起发送。这是浏览器中的默认值。"),n("br"),t._v("\nstrict：Cookies 只会在第一方上下文中发送，不会与第三方网站发起的请求一起发送。"),n("br"),t._v("\nnone：Cookie 将在所有上下文中发送，即允许跨站发送。"),n("br"),t._v(" "),n("a",{attrs:{href:"https://cloud.tencent.com/developer/article/1888131",target:"_blank",rel:"noopener noreferrer"}},[t._v("第一方与第三方 cookie"),n("OutboundLink")],1)]),t._v(" "),n("h2",{attrs:{id:"跨站与跨域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#跨站与跨域"}},[t._v("#")]),t._v(" 跨站与跨域")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://alexzhong22c.github.io/2020/05/22/cross-origin-cross-site/",target:"_blank",rel:"noopener noreferrer"}},[t._v("详细"),n("OutboundLink")],1)]),t._v(" "),n("h2",{attrs:{id:"syn-cookie"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#syn-cookie"}},[t._v("#")]),t._v(" SYN Cookie")]),t._v(" "),n("p",[t._v("SYN FLOOD 是一种 DDOS(拒绝服务攻击)"),n("br"),t._v("\n攻击者伪造 SYN 请求(攻击报文)建立连接，占用服务器资源"),n("br"),t._v("\nSYN Cookie 同时也能实现 Fast Open"),n("br"),t._v("\nSYN Cookie 技术可以让服务器在收到客户端的 SYN 报文时，不分配资源保存客户端信息，而是将这些信息保存在 SYN+ACK 的初始序号和时间戳中。对正常的连接，这些信息会随着 ACK 报文被带回来。")]),t._v(" "),n("h2",{attrs:{id:"前端鉴权"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前端鉴权"}},[t._v("#")]),t._v(" 前端鉴权")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://mp.weixin.qq.com/s/rwp9sXi4Y8Ht0UbA6z4hSg",target:"_blank",rel:"noopener noreferrer"}},[t._v("详细"),n("OutboundLink")],1),n("br"),t._v(" "),n("a",{attrs:{href:"https://juejin.cn/post/6845166891393089544",target:"_blank",rel:"noopener noreferrer"}},[t._v("掘金"),n("OutboundLink")],1),n("br"),t._v(" "),n("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/157",target:"_blank",rel:"noopener noreferrer"}},[t._v("cookie 与 samesite"),n("OutboundLink")],1),n("br"),t._v("\n简单 token 的组成： uid(用户唯一的身份标识)、time(当前时间的时间戳)、sign（签名，token 的前几位以哈希算法压缩成的一定长度的十六进制字符串）"),n("br"),t._v("\n安全性：token > session > cookie"),n("br"),t._v("\ncookie 重要的属性：name=value、domain、path、maxAge、expires、secure、httpOnly、samesite"),n("br"),t._v(" "),n("strong",[t._v("SameSite")]),t._v("(声明该 Cookie 是否仅限于第一方或者同一站点上下文。) 可以有下面三种值："),n("br"),t._v("\nStrict 仅允许一方请求携带 Cookie，即浏览器将只发送相同站点请求的 Cookie，即当前网页 URL 与请求目标 URL 完全一致。"),n("br"),t._v("\nLax 允许部分第三方请求携带 Cookie"),n("br"),t._v("\nNone 无论是否跨站都会发送 Cookie")]),t._v(" "),n("h2",{attrs:{id:"性能优化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#性能优化"}},[t._v("#")]),t._v(" 性能优化")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://juejin.cn/post/6844903657318645767#comment",target:"_blank",rel:"noopener noreferrer"}},[t._v("Yahoo"),n("OutboundLink")],1),n("br"),t._v("\n1、js：async defer、减少 dom 操作：减少重排重绘"),n("br"),t._v("\n2、css: 选择器避免嵌套"),n("br"),t._v("\n3、img: cdn、webp、base64、sprite，图片懒加载，预加载。"),n("br"),t._v("\n4、网站的静态资源使用独立的域名：① 避免域名污染。 当浏览器向服务器请求一个静态资源时,会先发送同域名下的 cookie，服务器对于这些 cookie 不会做任何处理。因此它们只是在毫无意义的消耗带宽。所以你应该确保对于静态内容的请求是无 coockie 的请求。② 提高并发的 tcp 连接数量，每个域名下持久连接数是 6 个。③ 动静分离有利于 CDN"),n("br"),t._v("\n5、减少 http 请求，base64，雪碧图等"),n("br"),t._v("\n注：Base64 是以编码的形式嵌入到页面，而不是外部载入，所以可以减少 http 请求(前提：图片很小，如果大图片则转码后体积更大得不偿失)"),n("br"),t._v("\n6、ssr 服务端渲染，首屏时间快"),n("br"),t._v("\n7、节流防抖"),n("br"),t._v("\n8、包的大小："),n("br"),t._v("\n第三方库用 cdn 引入，external-plugin；"),n("br"),t._v("\ncompression-webpack-plugin 开启 gzip 压缩；"),n("br"),t._v("\nterser-webpack-plugin 压缩 js；"),n("br"),t._v("\nsplit-Chunks-plugin 分包("),n("a",{attrs:{href:"https://webpack.docschina.org/guides/code-splitting/",target:"_blank",rel:"noopener noreferrer"}},[t._v("code split"),n("OutboundLink")],1),t._v("),把代码分离到不同的 bundle 中，然后可以按需加载或并行加载这些文件。代码分离可以用于获取更小的 bundle，以及控制资源加载优先级"),n("br"),t._v("\ndll-plugin 把复用性较高的第三方模块打包到动态链接库中，在不升级这些库的情况下，动态库不需要重新打包，每次构建只重新打包业务代码")]),t._v(" "),n("h2",{attrs:{id:"应用层与传输层"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#应用层与传输层"}},[t._v("#")]),t._v(" 应用层与传输层")]),t._v(" "),n("p",[t._v("HTTP 是属于应用层的协议，最终的数据传输还是要通过传输层（比如常见的 TCP、UDP）传输。HTTP/1.1 和 HTTP/2 的传输是通过 TCP，HTTP/3 是通过 QUIC（基于 UDP）传输。"),n("br"),t._v("\n不管是 TCP 还是 QUIC，实际上都是通过 byte[] 字节流的方式在网络上传输的。在应用层 HTTP 通过编码（encode）把文件、图片、JSON 等转换成 byte[]，经过传输层（TCP、UDP）传给目标地址。然后目标地址接收到 byte[] 数据后，再解码（decode）成对应的对象。")]),t._v(" "),n("h2",{attrs:{id:"缓存相关补充"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#缓存相关补充"}},[t._v("#")]),t._v(" 缓存相关补充")]),t._v(" "),n("p",[t._v("一、强缓存：max-age 和 expires 和 pragma\n1、max-age 是 cache-control(强缓存)header 中的一个 key，其他两个都是单独的 key。"),n("br"),t._v("\n注：cookie 里既有 max-age 也有 expires"),n("br"),t._v("\n2、优先级问题：从高到低"),n("br"),t._v("\n3、为什么 max-age 优先级高：expires 是绝对时间，依赖于计算机时钟的正确设置，不靠谱。所以采用相对时间。"),n("br"),t._v("\n4、pragma 只有一个属性：Pragma: no-cache"),n("br"),t._v("\n解释：与 Cache-Control: no-cache 效果一致。强制要求缓存服务器在返回缓存的版本之前将请求提交到源头服务器进行验证。"),n("br"),t._v("\n二、ETag 的强弱验证器"),n("br"),t._v("\n弱验证器以/W 开头，表明内容发生了不那么重要的改变的时候，仍然可以用协商缓存")]),t._v(" "),n("h2",{attrs:{id:"代理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#代理"}},[t._v("#")]),t._v(" 代理")]),t._v(" "),n("p",[t._v("正向代理：代理端代理的是客户端。如：VPN"),n("br"),t._v("\n反向代理：代理端代理的是服务端。如：Nginx"),n("br"),t._v("\nNginx 解决跨域：\n客户端的域名为 client.com，服务器的域名为 server.com")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("server "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  listen  "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  server_name  client"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  location "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("api "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    proxy_pass server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("Nginx 服务器的域名也为 client.com，当请求某个接口时，Nginx 进行代理转发，请求真实的服务器域名，拿到响应返回给客户端。\n"),n("a",{attrs:{href:"https://www.cnblogs.com/rainman/archive/2011/02/20/1959325.html#m1",target:"_blank",rel:"noopener noreferrer"}},[t._v("其他的跨域方法"),n("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=e.exports}}]);